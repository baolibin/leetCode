# coding:utf-8
'''
1219. 黄金矿工
你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。
每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。

为了使收益最大化，矿工需要按以下规则来开采黄金：
每当矿工进入一个单元，就会收集该单元格中的所有黄金。
矿工每次可以从当前位置向上下左右四个方向走。
每个单元格只能被开采（进入）一次。
不得开采（进入）黄金数目为 0 的单元格。
矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。
示例 1：

输入：grid = [[0,6,0],[5,8,7],[0,9,0]]
输出：24
解释：
[[0,6,0],
 [5,8,7],
 [0,9,0]]
一种收集最多黄金的路线是：9 -> 8 -> 7。
示例 2：

输入：grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
输出：28
解释：
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
一种收集最多黄金的路线是：1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7。
'''


class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        d = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        def dfs(x, y):
            res = 0
            src = grid[x][y]
            grid[x][y] = 0
            for i, j in d:
                nx = i + x
                ny = j + y
                if nx >= 0 and nx < m and ny >= 0 and ny < n and grid[nx][ny] != 0:
                    res = max(res, grid[nx][ny] + dfs(nx, ny))
            grid[x][y] = src
            return res

        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] != 0:
                    res = max(res, grid[i][j] + dfs(i, j))
        return res


'''
解题思路：
1）遍历矩阵，从非 0 数字开始按上、下、左、右四个方向搜索。
2）标记已经访问过的坐标。
3）遇到遍历过或者为 0 的数字就停止搜索。
4）搜索过程中将该位置的值累加上。
5）拿到最后得到的值，跟上一个最大值进行比较，二者取其大。
'''
